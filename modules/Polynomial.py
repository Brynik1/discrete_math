from Rational import Rational


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Polynomial(Rational):
    def __init__(self, polynomial: str):
        self.numbers = polynomial.split()
        try:
            self.coefficients = [Rational(coefficient) for coefficient in polynomial.split()]
        except ValueError:
            raise ValueError("Input must be a polynomial üò≠")

    def __str__(self):
        return ' '.join([str(coefficient) for coefficient in self.coefficients])

    def __mul__(self, other):
        # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ —É–º–Ω–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ—Ç
        if type(other) == Polynomial:
            coeff_len = len(other.coefficients)
            mul_coeffs = []
            for i in range(coeff_len):
                mul_coeffs.append(self.MUL_PQ_P(other.coefficients[i]).MUL_Pxk_P(coeff_len-i))
                if i != 0:
                    mul_coeffs[0].ADD_PP_P(mul_coeffs[i])

            self.coefficients = mul_coeffs[0]
            return self

    def __floordiv__(self, other):
        # –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
        if type(other) == Polynomial:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–Ω–æ–≥–æ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∏–Ω–æ–º–∞ –Ω–∞ –ø–æ–ª–∏–Ω–æ–º
            poly_quotient = [0]*(self.DEG_P_N() + 1)
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            # dividend - –¥–µ–ª–∏–º–æ–µ
            dividend = Polynomial('')
            dividend.coefficients = [x for x in self.coefficients]

            # –î–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∫–∞ —Å—Ç–µ–ø–µ–Ω—å –¥–µ–ª–∏–º–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –¥–µ–ª–∏—Ç–µ–ª—è
            # –ê–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±–∏–∫–æ–º
            while dividend.DEG_P_N() >= other.DEG_P_N():
                # Quotient - —á–∞—Å—Ç–Ω–æ–µ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                quotient = dividend.LED_P_Q().DIV_QQ_Q(other.LED_P_Q())

                # –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ x^k, –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–µ–π, —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                div_poly = other.MUL_Pxk_P(dividend.DEG_P_N() - other.DEG_P_N()).MUL_PQ_P(quotient)

                poly_quotient[dividend.DEG_P_N() - other.DEG_P_N()] = quotient

                dividend = dividend.SUB_PP_P(div_poly)

            result = Polynomial('')
            result.coefficients = poly_quotient
            return result

    def __mod__(self, other):
        if type(other) == Polynomial:
            # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
            # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –¥–µ–ª–∏—Ç–µ–ª—å –∏ –ø–æ—Ç–æ–º –≤—ã—á–∏—Ç–∞—Ç–µ–º
            poly_quotient = self // other
            poly_quotient *= other

            return self.SUB_PP_P(poly_quotient)

    # –°–ª–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def ADD_PP_P(self, other):
        pass
    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def SUB_PP_P(self, other):
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    def MUL_PQ_P(self, rational):
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ x^k, k-–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ 0
    def MUL_Pxk_P(self):
        pass
    # –°—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def LED_P_Q(self):
        pass
    # –°—Ç–µ–ø–µ–Ω—å –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DEG_P_N(self):
        while self.coefficients[0] == 0:
            self.coefficients.pop(0)
        return len(self.coefficients) - 1

    # –í—ã–Ω–µ—Å–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –ù–û–î —á–∏—Å–ª–∏—Ç–µ–ª–µ–π
    def FAC_P_Q(self):
        numerators = []
        denominators = []

        # –í –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —á–∏—Å–ª–∏—Ç–µ–ª–∏ –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        for coefficient in self.coefficients:
            numerators.append(coefficient.numerator.ABS_Z_N().TRANS_Z_N())
            denominators.append(coefficient.denominator)

        # –ü–æ–æ—Å–µ—Ä–µ–¥–Ω–æ –±–µ—Ä–µ—Ç—Å—è –ù–û–î –¥–≤—É—Ö —á–∏—Å–ª–∏—Ç–µ–ª–µ–π –∏ –ù–û–ö –¥–≤—É—Ö –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª–µ–π
        # –í –∏—Ç–æ–≥–µ –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–∏—Ç–µ–æ–µ–π –ù–û–î –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ 0 —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        # –í —Å–ª—É—á–∞–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ —Å–∞–º–æ–µ
        for i in range(1, len(numerators)):
            for j in range(len(numenators) - i):
                numerators[j] = numerators[j].GCF_NN_N(numerators[j + 1])
                denominators[j] = denominators[j].LCM_NN_N(denominators[j + 1])

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –≤–∏–¥–∞ –ù–û–î/–ù–û–ö
        return Rational(f'{numerators[0].TRANS_N_Z()}/{denominators[0]}')

    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def MUL_PP_P(self, other):
        # –£–º–Ω–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–º –º–µ—Ç–æ–¥–µ
        # –ù–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ –±—É–¥–µ—Ç =)
        return self * other

    # –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def DIV_PP_P(self, other):
        # –î–µ–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–º –º–µ—Ç–æ–¥–µ
        # –ù–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ –±—É–¥–µ—Ç :D
        return self // other

    # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def MOD_PP_P(self, other):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–∑–æ–≤–∞–Ω–æ –≤ –≤–∏–¥–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∑—è—Ç–∏—è –æ—Å—Ç–∞—Ç–∫–∞, —Å –ø–æ–º–æ—â—å—é –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
        return self % other

    # –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def GCF_PP_P(self):
        pass
    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DER_P_P(self):
        pass
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ ‚Äî –∫—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ
    def NMR_P_P(self):
        pass


# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
if __name__ == '__main__':
    a = Polynomial('-2/3 3 4 -2')   #    -2/3  +  3X + 4X^2 - 2X^3
    print(a)

