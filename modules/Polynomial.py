from Rational import Rational


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Polynomial(Rational):
    def __init__(self, polynomial: str):
        self.numbers = polynomial.split()
        try:
            self.coefficients = [Rational(coefficient) for coefficient in polynomial.split()]
        except ValueError:
            raise ValueError("Input must be a polynomial üò≠")

    def __str__(self):
        return ' '.join([str(coefficient) for coefficient in self.coefficients])



    # –°–ª–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def ADD_PP_P():
        pass
    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def SUB_PP_P():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    def MUL_PQ_P():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ x^k, k-–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ 0
    def MUL_Pxk_P():
        pass
    # –°—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def LED_P_Q():
        pass
    # –°—Ç–µ–ø–µ–Ω—å –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DEG_P_N():
        pass
    # –í—ã–Ω–µ—Å–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –ù–û–î —á–∏—Å–ª–∏—Ç–µ–ª–µ–π
    def FAC_P_Q():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def MUL_PP_P():
        pass
    # –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def DIV_PP_P():
        pass
    # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def MOD_PP_P():
        pass# –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def GCD_PP_P(self, coeff_polynom_1: list, coeff_polynom_2: list) -> list:
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ù–û–î–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤"""

        def compare_polinomials(self, coeff_polynom_1: list, coeff_polynom_2: list):
            """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤"""
            # —É–±–∏—Ä–∞–µ–º –Ω—É–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
            while any(coeff_polynom_1) == False and coeff_polynom_1[0] == 0:
                coeff_polynom_1.pop(0)
        
            while any(coeff_polynom_2) == False and coeff_polynom_2[0] == 0:
                coeff_polynom_2.pop(0)

            # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤ DEG_P_N
            if self.DEG_P_N(coeff_polynom_1) > self.DEG_P_N(coeff_polynom_2):
                return 1
            elif self.DEG_P_N(coeff_polynom_1) < self.DEG_P_N(coeff_polynom_2):
                return 2
            
            counter1, counter2 = 0, 0
            # –µ—Å–ª–∏ —Å—Ç–µ–ø–µ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ. –ø–æ –ø–æ—Ä—è–¥–∫—É
            for coeff1, coeff2 in zip(coeff_polynom_1, coeff_polynom_2):
                if coeff1 > coeff2:
                    counter1 += 1
                elif coeff2 > coeff1:
                    counter2 += 1
            if counter1 > counter2:
                return 1 # –∫–æ—ç—Ñ—Ñ. —É –ø–µ—Ä–≤–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –±–æ–ª—å—à–µ
            elif counter2 > counter1:
                return 2 # –∫–æ—ç—Ñ—Ñ. —É –≤—Ç–æ—Ä–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –±–æ–ª—å—à–µ
            else:
                return 0 # –º–Ω–æ–≥–æ—á–ª–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ

        while any(coeff_polynom_2): # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∫–æ—ç—Ñ.
            # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–Ω–æ–≥–æ—á–ª–µ–Ω—ã
            # –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –±–æ–ª—å—à–µ –ø–µ—Ä–≤–æ–≥–æ, –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            if compare_polinomials(coeff_polynom_1, coeff_polynom_2) == 2: 
                coeff_polynom_1, coeff_polynom_2 = coeff_polynom_2, coeff_polynom_1
            # –µ—Å–ª–∏ –º–Ω–æ–≥–æ—á–ª–µ–Ω—ã —Ä–∞–≤–Ω—ã, —Ç–æ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ù–û–î
            elif compare_polinomials(coeff_polynom_1, coeff_polynom_2) == 0:
                return coeff_polynom_1
            
            # –¥–µ–ª–∏–º –º–Ω–æ–≥–æ—á–ª–µ–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞—Ç–æ–∫ 
            residue = MOD_PP_P(coeff_polynom_1, coeff_polynom_2)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ coeff_polynom_1 –∏ coeff_polynom_2 
            coeff_polynom_1, coeff_polynom_2 = coeff_polynom_2, residue

        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        while coeff_polynom_1 and abs(coeff_polynom_1[0]) == 0:
            coeff_polynom_1.pop(0)

        return coeff_polynom_1

    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DER_P_P(self, coeff_polynom: list) -> list:
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞"""
        derivative = [] # –º–∞—Å—Å–∏–≤ –∫–æ—ç—Ñ. –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        coeff_polynom.reverse() # –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        # –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—ç—Ñ. –ø–æ —Ñ–æ—Ä–º—É–ª–µ (a*x**(k))' = a*k*x**(k-1)
        derivative = [coeff_polynom[ind]*ind for ind in range(1, len(coeff_polynom))] 
        derivative.reverse() # –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤

        return derivative if derivative else [0]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ ‚Äî –∫—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ
    def NMP_P_P(self, coeff_polynom: list) -> list:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ """
        # –Ω–∞–π–¥–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        derivate = self.DER_P_P(coeff_polynom)
        # –Ω–∞–π–¥–µ–º –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –∏ –µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
        gcd_polynom = self.GCD_PP_P(coeff_polynom, derivate)
        # –Ω–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç–Ω–æ–µ –æ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –µ–≥–æ –ù–û–î
        simple_polymon = self.DIV_PP_P(coeff_polynom, gcd_polynom)

        return simple_polymon



# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
if __name__ == '__main__':
    a = Polynomial('-2/3 3 4 -2')   #    -2/3  +  3X + 4X^2 - 2X^3
    print(a)

