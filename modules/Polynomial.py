from Rational import Rational
from Integer import Integer
from Natural import Natural
import copy


'''    
    –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    
    –£ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ã–π, –Ω–æ –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!
    
    –ü—Ä–∏–º–µ—Ä (—Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ–ª—å—à–µ –ø—è—Ç–∏ –º–∏–Ω—É—Ç):
    x = Polynomial('-35/1 -33/1 -62/1 22/1')
    y = Polynomial('207/121 51/22 1207/242')
    print(f'{x}  %  {y}  =  {Polynomial.MOD_PP_P(x, y)}')
    
    Ps: –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
'''


class Polynomial:
    def __init__(self, polynomial: str):  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        self.numbers = polynomial.split()
        try:
            self.coefficients = [Rational(coefficient) for coefficient in polynomial.split()]
            while len(self.coefficients) > 1 and self.coefficients[-1].numerator.POZ_Z_D() == 0: self.coefficients = self.coefficients[:-1]
        except ValueError:
            raise ValueError("Input must be a polynomial üò≠")

    def __str__(self):
        def f(coefficient): return f'{coefficient.numerator}/{coefficient.denominator}' if coefficient.denominator.COM_NN_D(Natural('1')) else str(coefficient.numerator)
        return ' '.join([f(coefficient) for coefficient in self.coefficients])

    # –°–ª–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def ADD_PP_P(self, oth):
        a = copy.deepcopy(self.coefficients)  # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        b = copy.deepcopy(oth.coefficients)  # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        if len(b) > len(a): a, b = b, a  # –ü–µ—Ä–≤—ã–º —Å–ª–∞–≥–∞–µ–º—ã–º –±–µ—Ä–µ–º –º–Ω–æ–≥–æ—á–ª–µ–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–ª–∏–Ω–æ–π
        for i in range(min(len(a), len(b))):
            a[i] = Rational.ADD_QQ_Q(a[i], b[i])  # –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        return Polynomial(' '.join(str(coefficient) for coefficient in a))

    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def SUB_PP_P(self, oth):
        b = copy.deepcopy(oth.coefficients)
        for i in range(len(b)):
            b[i] = Rational(f'{b[i].numerator.MUL_ZM_Z()}/{b[i].denominator}')  # –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        return Polynomial.ADD_PP_P(self, Polynomial(' '.join(str(coefficient) for coefficient in b)))


    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    def MUL_PQ_P(self, q):
        a = copy.deepcopy(self.coefficients)
        for i in range(len(a)):
            a[i] = Rational.MUL_QQ_Q(a[i], q)
        return Polynomial(' '.join(str(coefficient) for coefficient in a))

    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ x^k, k-–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ 0
    def MUL_Pxk_P(self, k):
        a = copy.deepcopy(self.coefficients)
        for i in range(int(str(k))):
            a.insert(0, Rational('0'))
        return Polynomial(' '.join(str(coefficient) for coefficient in a))

    # –°—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def LED_P_Q(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ –Ω—É–ª–µ–≤–æ–π, –ø—Ä–∞–≤–¥–∞,—è –Ω–∞–¥–µ—é—Å—å
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º <object Rational>
        if not self.coefficients:
            raise ValueError("Polynomial has no coefficients.")
        for i in range(len(self.coefficients) - 1, 0, -1):
            if self.coefficients[-1].numerator.POZ_Z_D() != 0:
                return self.coefficients[-1]

    # –°—Ç–µ–ø–µ–Ω—å –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DEG_P_N(self):
        return len(self.coefficients) - 1


    # –í—ã–Ω–µ—Å–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –ù–û–î —á–∏—Å–ª–∏—Ç–µ–ª–µ–π
    def FAC_P_Q(self):
        numerators = []
        denominators = []
        # –í –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —á–∏—Å–ª–∏—Ç–µ–ª–∏ –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        for coefficient in self.coefficients:
            numerators.append(coefficient.numerator.ABS_Z_N())
            denominators.append(coefficient.denominator)
        # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –±–µ—Ä–µ—Ç—Å—è –ù–û–î –¥–≤—É—Ö —á–∏—Å–ª–∏—Ç–µ–ª–µ–π –∏ –ù–û–ö –¥–≤—É—Ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π
        # –í –∏—Ç–æ–≥–µ –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–∏—Ç–µ–ª–µ–π –ù–û–î –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ 0 —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        # –í —Å–ª—É—á–∞–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ —Å–∞–º–æ–µ
        for i in range(1, len(numerators)):
            for j in range(len(numerators) - i):
                numerators[j] = numerators[j].GCF_NN_N(numerators[j + 1])
                denominators[j] = denominators[j].LCM_NN_N(denominators[j + 1])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –≤–∏–¥–∞ –ù–û–î/–ù–û–ö
        return Rational(f'{numerators[0]}/{denominators[0]}')


    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def MUL_PP_P(self, other):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        result_degree = self.DEG_P_N() + other.DEG_P_N()
        result_coeffs = [Rational('0')] * (result_degree + 1)

        # –£–º–Ω–æ–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        for i in range(len(self.coefficients)):
            for j in range(len(other.coefficients)):
                result_coeffs[i+j] = Rational.ADD_QQ_Q(result_coeffs[i+j], Rational.MUL_QQ_Q(self.coefficients[i], other.coefficients[j]))

        return Polynomial(' '.join(str(coefficient) for coefficient in result_coeffs))

    # –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def DIV_PP_P(self, other):
        if self.DEG_P_N() < other.DEG_P_N():
            return Polynomial('0')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –º–Ω–æ–≥–æ—á–ª–µ–Ω
        poly_quotient = [Rational('0')] * (self.DEG_P_N() - other.DEG_P_N() + 1)
        dividend = copy.deepcopy(self)  # –ö–æ–ø–∏—Ä—É–µ–º

        # –î–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —Å—Ç–µ–ø–µ–Ω—å –¥–µ–ª–∏–º–æ–≥–æ –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–µ–ø–µ–Ω–∏ –¥–µ–ª–∏—Ç–µ–ª—è
        while dividend.DEG_P_N() >= other.DEG_P_N():
            quotient = dividend.LED_P_Q().DIV_QQ_Q(other.LED_P_Q())  # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–Ω–æ–≥–æ
            degree_diff = dividend.DEG_P_N() - other.DEG_P_N()
            div_poly = other.MUL_Pxk_P(degree_diff).MUL_PQ_P(quotient)  # –£–º–Ω–æ–∂–∞–µ–º –¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ x^k –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ —á–∞—Å—Ç–Ω–æ–µ
            poly_quotient[degree_diff] = quotient  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–Ω–æ–µ
            dividend = dividend.SUB_PP_P(div_poly)  # –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –¥–µ–ª–∏–º–æ–≥–æ

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–Ω–æ–≥–æ
        return Polynomial(' '.join(str(i) for i in poly_quotient))

    # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def MOD_PP_P(self, other):
        poly_quotient = self.DIV_PP_P(other)
        return self.SUB_PP_P(Polynomial.MUL_PP_P(poly_quotient, other))

    # –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def GCF_PP_P(self, other):
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞."""
        a = copy.deepcopy(self)
        b = copy.deepcopy(other)

        # –ê–ª–≥–æ—Ä–∏—Ç–º –ï–≤–∫–ª–∏–¥–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ù–û–î
        while b.DEG_P_N() > 0 and b != Polynomial('0'):
            a, b = b, a.MOD_PP_P(b)  # –û–±–Ω–æ–≤–ª—è–µ–º a –∏ b

        return a

    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DER_P_P(self):
        coeff_polynom = copy.deepcopy(self.coefficients)
        # –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—ç—Ñ. –ø–æ —Ñ–æ—Ä–º—É–ª–µ (a*x**(k))' = a*k*x**(k-1)
        derivative = [coeff_polynom[ind].MUL_QQ_Q(Rational(str(ind))) for ind in range(1, len(coeff_polynom))]
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        result = Polynomial(' '.join(str(coefficient) for coefficient in derivative))
        return result

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ ‚Äî –∫—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ
    def NMP_P_P(self):
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        polynom = copy.deepcopy(self)
        derivative = Polynomial.DER_P_P(polynom)
        # –ù–∞—Ö–æ–¥–∏–º –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –∏ –µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
        gcd_polynomial = Polynomial.GCF_PP_P(polynom, derivative)
        # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç–Ω–æ–µ –æ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –µ–≥–æ –ù–û–î
        simple_polynomial = Polynomial.DIV_PP_P(polynom, gcd_polynomial)
        return simple_polynomial



# –¢–µ—Å—Ç–∏–∫–∏ (–Ω—É–∂–Ω–æ –¥–æ–ø–∏–ª–∏—Ç—å)
def Polynomial_initial_test():
    print('–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤:')
    x = Polynomial('2 1/2 4 -3 1')
    y = Polynomial('1 1 22 2 2 2 -2/5')
    z = Rational('2')
    k = Natural('3')
    print(f'({x})  +  ({y})  =  {Polynomial.ADD_PP_P(x, y)}')  # ADD_PP_P
    print(f'({x})  -  ({y})  =  {Polynomial.SUB_PP_P(x, y)}')  # SUB_PP_P
    print(f'({x})  *  {z}  =  {Polynomial.MUL_PQ_P(x, z)}')  # MUL_PQ_P
    print(f'({x})  *  x^{k}  =  {Polynomial.MUL_Pxk_P(x, k)}')  # MUL_Pxk_P
    print(f'–°—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ({x})  =  {Polynomial.LED_P_Q(x)}')  # LED_P_Q
    print(f'DEG ({x})  =  {Polynomial.DEG_P_N(x)}')  # DEG_P_N
    print(f'–ù–û–î/–ù–û–ö ({x})  =  {Polynomial.FAC_P_Q(x)}')  # FAC_P_Q
    print(f'{x}  *  {y}  =  {Polynomial.MUL_PP_P(x, y)}')  # MUL_PP_P
    print(f'{x}  //  {y}  =  {Polynomial.DIV_PP_P(x, y)}')  # DIV_PP_P
    # print(f'{x}  %  {y}  =  {Polynomial.MOD_PP_P(x, y)}')       # MOD_PP_P
    # print(f'–ù–û–î  ({x};  {y})  =  {Polynomial.GCF_PP_P(y, x)}')  # GCF_PP_P
    print(f'–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è ({x})  =  {Polynomial.DER_P_P(x)}')  # DER_P_P
    # print(f'NMP ({x})  =  {Polynomial.NMP_P_P(x)}')             # NMP_P_P



if __name__ == '__main__':
    Polynomial_initial_test()
