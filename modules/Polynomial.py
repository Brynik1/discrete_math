from Rational import Rational


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Polynomial(Rational):
    def __init__(self, polynomial: str): #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
        self.numbers = polynomial.split()
        try:
            self.coefficients = [Rational(coefficient) for coefficient in polynomial.split()]
        except ValueError:
            raise ValueError("Input must be a polynomial üò≠")

    def __str__(self):
        return ' '.join([str(coefficient) for coefficient in self.coefficients])





    # –°–ª–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def ADD_PP_P(self, oth):
        a = self.coefficients
        b = oth.coefficients
        for i in range(min(len(a), len(b))):
            a[i] = Rational.ADD_QQ_Q(a[i], b[i])
        return a
    
    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def SUB_PP_P(self, oth):
        a = self.coefficients
        b = oth.coefficients
        for i in range(min(len(a), len(b))):
            a[i] = Rational.SUB_QQ_Q(a[i], b[i])
        return a
    
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    def MUL_PQ_P(self, q):
        for i in range(len(self.coefficients)):
            self.coefficients[i] = Rational.MUL_QQ_Q(self.coefficients[i], q)
        return self
    
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ x^k, k-–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ 0
    def MUL_Pxk_P(self, k):
        a = self.coefficients
        for i in range(k):
            a.insert(0, Rational('0'))
        return a

    # –°—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def LED_P_Q(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ –Ω—É–ª–µ–≤–æ–π, –ø—Ä–∞–≤–¥–∞,—è –Ω–∞–¥–µ—é—Å—å
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º <object Rational>
        if not self.coefficients:
            raise ValueError("Polynomial has no coefficients.")
        for i in range(len(self.coefficients) - 1, 0, -1):
            if self.coefficients[-1] != 0:
                return self.coefficients[-1]
    


    # –°—Ç–µ–ø–µ–Ω—å –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DEG_P_N():
        pass
    # –í—ã–Ω–µ—Å–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –ù–û–î —á–∏—Å–ª–∏—Ç–µ–ª–µ–π
    def FAC_P_Q():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def MUL_PP_P():
        pass
    # –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def DIV_PP_P():
        pass
    # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
    def MOD_PP_P():
        pass
    # –ù–û–î –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤
    def GCF_PP_P():
        pass
    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
    def DER_P_P():
        pass
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ ‚Äî –∫—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ
    def NMR_P_P():
        pass


# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞
if __name__ == '__main__':
    a = Polynomial('-2/3 3 4 -2') 
    b = Polynomial('-2/3 3 4 -2')   #    -2/3  +  3X + 4X^2 - 2X^3
    print(Polynomial.ADD_PP_P(a, b))

