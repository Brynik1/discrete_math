from Integer import Integer
from Natural import Natural


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Rational(Integer, Natural):
    def __init__(self, number: str):
        number = number.replace('|', '/')        # —á—Ç–æ–±—ã a|b –±—ã–ª–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ a/b
        number = number.replace(':', '/')        # —á—Ç–æ–±—ã a:b –±—ã–ª–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ a/b
        if number.count('/') == 1: number1, number2 = number.split('/')
        elif number.count('/') == 0: number1, number2 = number, '1'
        else: raise ValueError("Input must be a rational number üò≠")
        if number2 == '0': raise ValueError("–°an't divide by zero")
        try:
            self.numerator = Integer(number1)
            self.denominator = Natural(number2)
        except ValueError:
            raise ValueError("Input must be a rational number üò≠")

    def __str__(self):
        return (str(self.numerator) + '/' + str(self.denominator))



    # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥—Ä–æ–±–∏
    def RED_Q_Q(self):
        p=Integer(str(self.denominator.GCF_NN_N(self.numerator.ABS_Z_N())))             #–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª—å –≤ –Ω–∞—Ç—É–æ–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –∏—â–µ–º –Ω–æ–¥ —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–∞–µ–º —Ü–µ–ª—ã–º
        x=Integer(str(self.denominator)).DIV_ZZ_Z(p)            #–∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ —á–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–¥
        result=Rational('0')
        result.denominator=x.ABS_Z_N()          #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—å
        y=self.numerator.DIV_ZZ_Z(p)            #—á–∏—Å–ª–∏—Ç–µ–ª—å –¥–µ–ª–∏–º –Ω–∞ –Ω–æ–¥
        result.numerator=y          #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∏—Å–ª–∏—Ç–µ–ª—å
        return result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥—Ä–æ–±–Ω–æ–≥–æ –Ω–∞ —Ü–µ–ª–æ–µ, –µ—Å–ª–∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º, —Ç–æ ¬´–¥–∞¬ª, –∏–Ω–∞—á–µ ¬´–Ω–µ—Ç¬ª
    def INT_Q_B(self):
        p = self.denominator.GCF_NN_N(self.numerator.ABS_Z_N())             #–Ω–∞—Ö–æ–¥–∏–º –Ω–æ–¥ —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—è
        if self.denominator.COM_NN_D(p)==0:             #—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ–¥ –∏ –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–≤–Ω—ã, —Ç–æ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞—Ü–µ–ª–æ
            return True
        return False


    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –≤ –¥—Ä–æ–±–Ω–æ–µ
    def TRANS_Z_Q(self):
        result = Rational('0')
        result.denominator = Natural('1')           #–∑–∞–Ω–æ—Å–∏–º –≤ –∑–Ω–º–µ–Ω–∞—Ç–µ–ª—å 1
        result.numerator = self.numerator           #—á–∏—Å–ª–æ –∑–∞–Ω–æ—Å–∏–º –≤ —á–∏—Å–ª–∏—Ç–µ–ª—å
        return result

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥—Ä–æ–±–Ω–æ–≥–æ –≤ —Ü–µ–ª–æ–µ (–µ—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω 1)
    def TRANS_Q_Z():
        pass
    # –°–ª–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def ADD_QQ_Q():
        pass
    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def SUB_QQ_Q():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def MUL_QQ_Q():
        pass
    # –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π (–¥–µ–ª–∏—Ç–µ–ª—å –æ—Ç–ª–∏—á–µ–Ω –æ—Ç –Ω—É–ª—è)
    def DIV_QQ_Q():
        pass


# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
if __name__ == '__main__':
    a = Rational('-4/2')
    print(a)
    x=Rational('-6/4')
    y=Rational('5')
    d=x.RED_Q_Q()
    b=x.INT_Q_B()
    c=y.TRANS_Z_Q()
    print(x,d,b,c)