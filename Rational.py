from Integer import Integer
from Natural import Natural


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Rational(Integer, Natural):
    def __init__(self, number: str):
        number = number.replace('|', '/')        # —á—Ç–æ–±—ã a|b –±—ã–ª–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ a/b
        number = number.replace(':', '/')        # —á—Ç–æ–±—ã a:b –±—ã–ª–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ a/b
        if number.count('/') == 1: number1, number2 = number.split('/')
        elif number.count('/') == 0: number1, number2 = number, '1'
        else: raise ValueError("Input must be a rational number üò≠")
        if number2 == '0': raise ValueError("–°an't divide by zero")
        try:
            self.numerator = Integer(number1)
            self.denominator = Natural(number2)
        except ValueError:
            raise ValueError("Input must be a rational number üò≠")

    def __str__(self):
        return (str(self.numerator) + '/' + str(self.denominator))


    # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥—Ä–æ–±–∏
    def RED_Q_Q():
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥—Ä–æ–±–Ω–æ–≥–æ –Ω–∞ —Ü–µ–ª–æ–µ, –µ—Å–ª–∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º, —Ç–æ ¬´–¥–∞¬ª, –∏–Ω–∞—á–µ ¬´–Ω–µ—Ç¬ª
    def INT_Q_B():
        pass

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –≤ –¥—Ä–æ–±–Ω–æ–µ
    def TRANS_Z_Q():
        pass

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥—Ä–æ–±–Ω–æ–≥–æ –≤ —Ü–µ–ª–æ–µ (–µ—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω 1)
    def TRANS_Q_Z(self):
        return Integer(self.numerator)
        pass

    # –°–ª–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def ADD_QQ_Q(self, other):
        new_numerator = Integer.ADD_ZZ_Z(Integer.MUL_ZZ_Z(self.numerator,
                                                          Integer.TRANS_N_Z(other.denominator)),
                                         Integer.MUL_ZZ_Z(Integer.TRANS_N_Z(self.denominator),
                                                          other.numerator))  # –Ω–æ–≤—ã–π —á–∏—Å–ª–∏—Ç–µ–ª—å
        new_denominator = Integer.MUL_ZZ_Z(Integer.TRANS_N_Z(self.denominator),
                                           Integer.TRANS_N_Z(other.denominator))  # –Ω–æ–≤—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        return Rational(f'{new_numerator}/{new_denominator}')

    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def SUB_QQ_Q(self, other):
        new_numerator = Integer.SUB_ZZ_Z(Integer.MUL_ZZ_Z(self.numerator,
                                                          Integer.TRANS_N_Z(other.denominator)),
                                         Integer.MUL_ZZ_Z(Integer.TRANS_N_Z(self.denominator),
                                                          other.numerator))  # –Ω–æ–≤—ã–π —á–∏—Å–ª–∏—Ç–µ–ª—å
        new_denominator = Integer.MUL_ZZ_Z(self.denominator,
                                           Integer.TRANS_N_Z(other.denominator))  # –Ω–æ–≤—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        return Rational(f'{new_numerator}/{new_denominator}')

    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
    def MUL_QQ_Q(self, other):
        new_numerator = Integer.MUL_ZZ_Z(self.numerator, other.numerator)  # –Ω–æ–≤—ã–π —á–∏—Å–ª–∏—Ç–µ–ª—å
        new_denominator = Integer.MUL_ZZ_Z(Integer.TRANS_N_Z(self.denominator),
                                           Integer.TRANS_N_Z(other.denominator))  # –Ω–æ–≤—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        return Rational(f'{new_numerator}/{new_denominator}')

    # –î–µ–ª–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π (–¥–µ–ª–∏—Ç–µ–ª—å –æ—Ç–ª–∏—á–µ–Ω –æ—Ç –Ω—É–ª—è)
    def DIV_QQ_Q(self, other):
        other.numerator = Integer.TRANS_N_Z(other.denominator)  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥—Ä–æ–±–∏
        other.denominator = Integer.TRANS_Z_N(other.numerator)  # —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ
        return Rational.MUL_QQ_Q(self, other)


# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
if __name__ == '__main__':
    a = Rational('3/2')
    b = Rational('-4/7')
    print(Rational.MUL_QQ_Q(a, b))  # —Ç–µ—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ MUL_QQ_Q()
    print(Rational.DIV_QQ_Q(a, b))  # —Ç–µ—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ DIV_QQ_Q()
