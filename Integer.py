import copy

from Natural import Natural


'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —Ç–∞–±–ª–∏—á–∫–µ)'''
class Integer(Natural):
    def __init__(self, number: str):
        if not self.validate_Integer(number):
            raise ValueError("Input must be a integers number üò≠")

        if number[0] == '-':
            self.number = list(map(int, number[1:]))
            self.sign = 1
        else:
            self.number = list(map(int, number))
            self.sign = 0

    @staticmethod
    def validate_Integer(number: str):
        return all(c.isdigit() for c in number[1:]) and (number[0].isdigit() or number[0] == '-')

    def __str__(self):
        return ('-' if self.sign else '') + ''.join(map(str, self.number))



    # –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —á–∏—Å–ª–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ
    def ABS_Z_N(self):
        result = Natural(''.join(map(str, self.number)))
        return result

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–∞ (2 - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, 0 ‚Äî —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é, 1 - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
    def POZ_Z_D(self):
        for d in self.number:
            if d!=0: #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –Ω–µ –Ω–æ–ª—å
                if self.sign==0:
                    return 2
                else:
                    return 1
        return 0

    # –£–º–Ω–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –Ω–∞ (-1)
    def MUL_ZM_Z(self):
        result=copy.deepcopy(self)          #—Å –ø–æ–º–æ—â—å—é –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ø–∏—Ä—É–µ–º —á–∏—Å–ª–æ –≤ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if result.sign==0:          #–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
            result.sign=1
        else:
            result.sign=0
        return result

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –≤ —Ü–µ–ª–æ–µ
    def TRANS_N_Z(self,sign: int=0):
        result = Integer('0')
        result.number=copy.deepcopy(self.number)            #–∫–æ–ø–∏—Ä—É–µ–º —Å–∞–º–æ —á–∏—Å–ª–æ
        result.sign=sign            #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return result

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ
    def TRANS_Z_N(self):
        result = Integer('0')
        result.number = copy.deepcopy(self.number)          #–∫–æ–ø–∏—Ä—É–µ–º —á–∏—Å–ª–æ
        return Natural(str(result))           #–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–∞–µ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è Natural
    
    # –°–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    def ADD_ZZ_Z(self,other):
        s1 = self.POZ_Z_D()         #–≤—ã—è—Å–Ω—è–µ–º –∑–Ω–∞–∫–∏ –æ–±–æ–∏—Ö –ª–æ–≥–∞–µ–º—ã—Ö
        s2 = other.POZ_Z_D()
        if s1==0:           #–æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–ø–∏—Å—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≥–∞–µ–º—ã—Ö –Ω—É–ª–µ–≤–æ–µ
            return other
        if s2==0:
            return self
        if s1==1:           #–≤–µ—Ç–≤–∏–º—Å—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≥–∞–µ–º–æ–º—É, —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ self –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
            if s2==1:           #other –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
                return Integer(str(self.ABS_Z_N().ADD_NN_N(other.ABS_Z_N()))).MUL_ZM_Z()            #–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º self –∏ other –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Ö. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ü–µ–ª–æ–µ –∏ –º–µ–Ω—è–µ–º –∑–Ω–∞–∫.
            # other –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            x1=self.ABS_Z_N()
            x2=other.ABS_Z_N()
            a=x1.COM_NN_D(x2)           #—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º 2 –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞
            if a==0:            #—Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ —Å–ª–æ–≥–∞–µ–º—ã —Ä–∞–≤–Ω—ã, –Ω–æ –∏–º–µ—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏(self - –æ—Ç—Ä–∏—Ü., other - –ø–æ–ª–æ–∂.)
                return Integer('0')
            if a==2:        #self>other
                return Integer(str(x1.SUB_NN_N(x2))).MUL_ZM_Z()         #–≤—ã—á–∏—Ç–∞–µ–º –∏–∑ self other, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –º–µ–Ω—è–µ–º –∑–Ω–∞–∫
            return Integer(str(x2.SUB_NN_N(x1)))            #–≤—ã—á–∏—Ç–∞–µ–º –∏–∑ other self, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        #—Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ self –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if s2==2: #other –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            return Integer(str(self.ABS_Z_N().ADD_NN_N(other.ABS_Z_N())))           #–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º self –∏ other –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Ö. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ü–µ–ª–æ–µ
        #other –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        x1 = self.ABS_Z_N()
        x2 = other.ABS_Z_N()
        a = x1.COM_NN_D(x2)
        if a == 0:
            return Integer('0')
        if a == 2:
            return Integer(str(x1.SUB_NN_N(x2)))
        return Integer(str(x2.SUB_NN_N(x1))).MUL_ZM_Z()

    # –í—ã—á–∏—Ç–∞–Ω–∏–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    def SUB_ZZ_Z():
        pass
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    def MUL_ZZ_Z():
        pass
    # –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–æ–≥–æ –Ω–∞ —Ü–µ–ª–æ–µ(–¥–µ–ª–∏—Ç–µ–ª—å –æ—Ç–ª–∏—á–µ–Ω –æ—Ç –Ω—É–ª—è)
    def DIV_ZZ_Z(self, other):
        div_sign = self.sign != other.sign  # 1 –µ—Å–ª–∏ –∑–Ω–∞–∫–∏ —Ä–∞–∑–Ω—ã–µ, 0 –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        first = Integer.TRANS_Z_N(self)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º 1 —á–∏—Å–ª–æ –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ
        second = Integer.TRANS_Z_N(other)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º 2 —á–∏—Å–ª–æ –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ

        result = Natural.DIV_NN_N(first, second)  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª

        return Integer.TRANS_N_Z(result, sign=div_sign)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ü–µ–ª–æ–µ, –¥–æ–±–∞–≤–ª—è—è –∑–Ω–∞–∫


# –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
if __name__ == '__main__':
    a = Integer('-100')
    print(a)
    b=a.TRANS_Z_N()
    print(b)
    for i in range(-10,11):
        for k in range(-10,11):
            x=Integer(str(i))
            y = Integer(str(k))
            print(x,y,x.ADD_ZZ_Z(y))